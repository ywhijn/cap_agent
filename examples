At step 1207, you get the basic information for passenger requests and taxi vehicles, respectively. Their positions are represented as [longitude, latitude].
The passenger requests are as follows:
{
  "79929": {
    "origin": [104.0442485, 30.6541163],
    "destination": [104.0943915, 30.6261715],
    "expected_travel_distance": 5714.17,
    "expected_travel_time": 380.94,
    "state": "searching for an available vehicle",
    "distance_to_taxis": {
      "43": 1856.67
    },
    "waiting_step": 1129
  },
  "80419": {
    "origin": [104.0574839, 30.6552292],
    "destination": [104.0536866, 30.6700214],
    "expected_travel_distance": 1682.62,
    "expected_travel_time": 112.17,
    "state": "searching for an available vehicle",
    "distance_to_taxis": {
      "43": 1285.72
    },
    "waiting_step": 1141
  },
  "80751": {
    "origin": [104.053149, 30.6542649],
    "destination": [104.0149634, 30.7055944],
    "expected_travel_distance": 6776.01,
    "expected_travel_time": 451.73,
    "state": "searching for an available vehicle",
    "distance_to_taxis": {
      "43": 1312.8
    },
    "waiting_step": 1105
  },
  "80953": {
    "origin": [104.0513409, 30.6303493],
    "destination": [104.1485489, 30.6759049],
    "expected_travel_distance": 10588.06,
    "expected_travel_time": 705.87,
    "state": "searching for an available vehicle",
    "distance_to_taxis": {
      "43": 1688.06
    },
    "waiting_step": 1189
  }
}       , where `key` is the `passenger ID`, and `distance_to_taxis` field with 'taxi ID: distance(meter)' dict represents the estimated distance to the taxi vehicles in the decision space.
The taxi vehicles are as follows:
{
  "0": {
    "available seats": 1,
    "current_requests": {
      "78952": {
        "destination": [103.9711183, 30.6684935],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 829,
        "time_onboard": 730
      }
    },
    "position": [104.0159352, 30.6521332]
  },
  "1": {
    "available seats": 1,
    "current_requests": {
      "60": {
        "destination": [104.0238794, 30.6273549],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 847,
        "time_onboard": 1370
      }
    },
    "position": [104.0540681, 30.6506374]
  },
  "15": {
    "available seats": 2,
    "next_requests": {
      "80095": {
        "destination": [104.0764566, 30.6587257],
        "state": "assigned, waiting for pickup at origin",
        "assigned_step": 1004
      }
    },
    "position": [104.0631559, 30.6648128]
  },
  "16": {
    "available seats": 1,
    "current_requests": {
      "80679": {
        "destination": [104.1143983, 30.7028838],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 853,
        "time_onboard": 1015
      }
    },
    "position": [104.1164236, 30.6943993]
  },
  "17": {
    "available seats": 1,
    "current_requests": {
      "81209": {
        "destination": [104.1438647, 30.6276377],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 769,
        "time_onboard": 1395
      }
    },
    "position": [104.0249002, 30.6353862]
  },
  "18": {
    "available seats": 1,
    "current_requests": {
      "78852": {
        "destination": [104.0635658, 30.6462189],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 899,
        "time_onboard": 1405
      }
    },
    "position": [104.0486799, 30.6623049]
  },
  "19": {
    "available seats": 1,
    "current_requests": {
      "79833": {
        "destination": [104.0149634, 30.7055944],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 637,
        "time_onboard": 2620
      }
    },
    "position": [104.0352823, 30.7147848]
  },
  "22": {
    "available seats": 1,
    "current_requests": {
      "90": {
        "destination": [104.0191967, 30.6727979],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 697,
        "time_onboard": 2240
      }
    },
    "position": [104.0997977, 30.662513]
  },
  "24": {
    "available seats": 1,
    "current_requests": {
      "81196": {
        "destination": [103.984198, 30.6072897],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 770,
        "time_onboard": 1605
      }
    },
    "position": [104.1215003, 30.6177852]
  },
  "25": {
    "available seats": 1,
    "current_requests": {
      "80225": {
        "destination": [104.09434, 30.6307457],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 829,
        "time_onboard": 1860
      }
    },
    "position": [104.0955529, 30.6369301]
  },
  "27": {
    "available seats": 1,
    "current_requests": {
      "78929": {
        "destination": [104.1033539, 30.7063154],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 978,
        "time_onboard": 830
      }
    },
    "position": [104.0878152, 30.6732245]
  },
  "28": {
    "available seats": 1,
    "current_requests": {
      "78786": {
        "destination": [103.9956322, 30.6495947],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 697,
        "time_onboard": 1590
      }
    },
    "position": [103.9970936, 30.6478147]
  },
  "30": {
    "available seats": 1,
    "current_requests": {
      "80244": {
        "destination": [104.0461122, 30.6985488],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 781,
        "time_onboard": 1340
      }
    },
    "position": [103.9914968, 30.6765276]
  },
  "32": {
    "available seats": 1,
    "current_requests": {
      "80397": {
        "destination": [104.0369647, 30.6311328],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 589,
        "time_onboard": 2410
      }
    },
    "position": [104.0192589, 30.662989]
  },
  "38": {
    "available seats": 1,
    "current_requests": {
      "80152": {
        "destination": [104.0686204, 30.6057423],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 661,
        "time_onboard": 2400
      }
    },
    "position": [104.0887933, 30.6260816]
  },
  "42": {
    "available seats": 1,
    "current_requests": {
      "81147": {
        "destination": [104.1417669, 30.6285694],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 841,
        "time_onboard": 845
      }
    },
    "position": [104.1082668, 30.6556556]
  },
  "43": {
    "available seats": 2,
    "next_requests": {
      "79923": {
        "destination": [104.0538091, 30.6626102],
        "state": "assigned, waiting for pickup at origin",
        "assigned_step": 1207
      }
    },
    "position": [104.0595156, 30.6438068]
  },
  "44": {
    "available seats": 1,
    "current_requests": {
      "78653": {
        "destination": [104.1438647, 30.6276377],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 793,
        "time_onboard": 1145
      }
    },
    "position": [104.0833793, 30.6665533]
  },
  "47": {
    "available seats": 1,
    "current_requests": {
      "81181": {
        "destination": [104.121344, 30.6500574],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 457,
        "time_onboard": 2930
      }
    },
    "position": [104.0920269, 30.6580717]
  },
  "49": {
    "available seats": 1,
    "current_requests": {
      "80143": {
        "destination": [104.0581845, 30.652642],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 853,
        "time_onboard": 990
      }
    },
    "position": [104.0664746, 30.6570509]
  },
  "50": {
    "available seats": 1,
    "current_requests": {
      "80678": {
        "destination": [104.0803019, 30.6681304],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 774,
        "time_onboard": 1345
      }
    },
    "position": [104.0767, 30.6696598]
  },
  "51": {
    "available seats": 1,
    "current_requests": {
      "80618": {
        "destination": [104.128238, 30.6966276],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 925,
        "time_onboard": 1215
      }
    },
    "position": [104.1323804, 30.6818588]
  },
  "67": {
    "available seats": 1,
    "current_requests": {
      "111": {
        "destination": [104.0104793, 30.7109051],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 205,
        "time_onboard": 4300
      }
    },
    "position": [104.0201582, 30.7067199]
  },
  "78": {
    "available seats": 1,
    "current_requests": {
      "81202": {
        "destination": [104.0251047, 30.686333],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 541,
        "time_onboard": 2685
      }
    },
    "position": [104.0590152, 30.6971871]
  },
  "79": {
    "available seats": 1,
    "current_requests": {
      "79108": {
        "destination": [104.0641663, 30.6398776],
        "state": "picked up, waiting for arrival at destination",
        "assigned_step": 801,
        "time_onboard": 890
      }
    },
    "position": [104.0739529, 30.7020194]
  }
}       , where the key is the `taxi ID`, and its value represents the taxi's current position and any already assigned passenger on it.
For the current step, you get the decision space for taxis, where the key is the `taxi ID` and the value is possibly a list of `passenger ID` within the suitable service area of the taxi.
{
  "43": [79929, 80953, 80419, 80751]
}
You must follow the rules:
1. Don't finish the task until you have a final answer. Make sure you have considered all the given information.
2. Assume passengers and drivers are willing to participate in ride-sharing for environmental and cost-saving reasons. But we cannot assign over 2 passengers to a single taxi
3. If all taxi drivers are unavailable to a certain passenger, you must assign that passenger to a special taxi ID -1, which means the order is NOT assigned to any taxi driver. Provide a clear explanation for why the assignment couldn't be made.

Please assign passengers to taxi drivers according to the given rules and information. 
Provide your response only in the following json format without extra words:
[
  {"u_id": Passenger ID, "v_id": Driver ID, "reason": "Brief explanation for this assignment"}
]


BASIC_rules={
"allow_pooling": 
  "Assume passengers and drivers are willing to participate in ride-sharing for environmental and cost-saving reasons if seats available. ",
"Constrain": 
  "Each taxi driver can be assigned at most one passenger at each step, and each passenger can only be assigned to at most one taxi driver.",
"force_assignment": 
  "Prioritize assigning all passengers to available drivers when possible",
"CoT":"Let's take a deep breath and think step by step.",
"complete_rule":
"Don't finish the task until you have a final answer. Make sure you have considered all the given information.",
"output_rule":
"You should only output a list of json.",
"failed_request_handling":
 "If all taxi drivers are unavailable to a certain passenger, you must assign that passenger to a special taxi ID '-1', which means the passenger is NOT assigned to any taxi driver.",
}


Number U 48 Number V 2
Reason: Closest to taxi 70 and has been waiting since step 1897.
Passenger 78698 assigned to Driver 70
Reason: Second closest to taxi 70 and has been waiting since step 1897.
Passenger 79345 assigned to Driver 70
Reason: Third closest to taxi 70 and has been waiting since step 1849.
Passenger 79605 assigned to Driver 70
Reason: Closest to taxi 72 and has been waiting since step 1849.
Passenger 78812 assigned to Driver 72
Reason: Second closest to taxi 72 and has been waiting since step 1849.
Passenger 80517 assigned to Driver 72


Reason: Closest passenger to the taxi with available seats.
Passenger 78680 assigned to Driver 51
Reason: Second closest passenger after seat is occupied by previous assignment.
Passenger 79919 assigned to Driver 51
Reason: Third closest passenger and the taxi has no more available seats after this assignment.
Passenger 80352 assigned to Driver 51
Reason: No available taxis with seats left for this passenger.
Passenger 79415 assigned No Driver
Reason: No available taxis with seats left for this passenger.
Passenger 80202 assigned No Driver
Reason: No available taxis with seats left for this passenger.
Passenger 79326 assigned No Driver
Reason: No available taxis with seats left for this passenger.
Passenger 80542 assigned No Driver
Reason: No available taxis with seats left for this passenger.
Passenger 79372 assigned No Driver




AGENT_MESSAGE_TOOL = \
"""{uv_pairs}
{decision_space}
To distribute the requests to taxi services, you must follow the given rules:
{rules}
Let's take a deep breath and think step by step.
Once you have made all of final decision, you must output them in the following format: \n
{output_format}
"""

output_format1= \
"""
Passenger ID: Driver ID
reason: Brief explanation for this assignment
"""

output_format3triple= \
"""
u_id: Passenger ID
v_id: Driver ID
reason: Brief observation for current demand and need and some explanation for this assignment
"""

output_json_format = """
[
  {"u_id": Passenger ID, "v_id": Driver ID, "reason": "Brief explanation for this assignment"},
]
"""

                # if len(trip.requests) > 0:
                #     #reward += sum(request.original_travel_distance for request in trip.requests) / 1000
                #     reward -= alpha * np.sum(path.time_delay_to_each_position)
                #     reward += sum(request.CalculatePrice() for request in trip.requests)
                #     #reward -= sum(self.environment.GetDistanceandTime(req.pickup_position, path.current_position, type = 'Manhattan')[1] / 600 for req in trip.requests)
                #     #reward += len(trip.requests)
                # if pre_values is not None:
                #     score = reward + self.cfg.MODEL.DISCOUNT_FACTOR * pre_values[value_cnt, 0]
                # else:  Provide a clear explanation for why the assignment couldn't be made.
                #     score = reward
                # The input provided has been pre-screened.  But at most two passengers can be assigned to a single taxi

AGENT_MESSAGE = \
"""{uv_pairs}
{decision_space}
You must follow the rules:
{rules}
Please assign passengers to taxis according to the given rules and information. 
You must response only in the list of following json format directly :{output_format}
"""
Outpu_as_tool=\
"""
Provide your response only in the following json format for each assignment without extra words:
{output_format}
Make sure to provide an assignment for each passenger if possible. Separate each assignment with a blank line.
"""

BASIC_rules={
"allow_pooling": 
  "Assume passengers and drivers are willing to participate in ride-sharing for environmental and cost-saving reasons if seats available. ",
"Constrain": 
  "Each taxi driver can be assigned at most one passenger, and each passenger can only be assigned to at most one taxi driver.",
"force_assignment": 
  "Prioritize assigning all passengers to available drivers when possible",
"CoT":"Let's take a deep breath and think step by step.",
"complete_rule":
"Don't finish the task until you have a final answer. Make sure you have considered all the given information.",
"output_rule":
"You should only output a list of json.",
"failed_request_handling":
 "If all taxi drivers are unavailable to a certain passenger, you must assign that passenger to a special taxi ID '-1', which means the passenger is NOT assigned to any taxi driver.",
}
TOOL_rule={
"fix_tools": "You can only use tools mentioned to help you make decision. Don't fabricate any other tool name not mentioned.",
"remeber_tools": "Remember what tools you have used, you can use same tool to solve the problems of identical property.",
"easy_tool" : "If the assignment decision is too obvious, such as only one candidate taxi id is in a passengers' options, you can directly assign the driver to the passenger without using any tool."
}


output_format="""
Once you made a final decision, output it in the following format: \n
```
Final Answer: 
"decision": {{ list of request assignment tuple(int, int) that indicate the request (1st id) from a passenger is assigned to a taxi driver (2nd id) }},
"explanation": {{ your explanation about your decision, described your suggestions to the taxi drivers }}
```
"""
# AGENT_MESSAGE = """As the 'traffic signal light', you are tasked with controlling the traffic signal at an intersection. You've been in control for {sim_step} seconds. The last decision you made was {last_step_action}, with the explanation {last_step_explanation}. Now, you need to assess the current situation and make a decision for the next step.
#
# To do this, you must describe the Static State and Dynamic State of the traffic light, including the Intersection Layout, Signal Phase Structure, and Current Occupancy. Determine if you are facing a long-tail problem, such as the presence of an ambulance, impassable movements or the detectors are not work well.
## The decision space for passenger requests is as follows:
# {dict_to_str(U2MultiV)}"""
#         if len(V2MultiU)<2:
#             decision_space_prompt += f"""
# If it's a standard situation, refer to the Traditional Decision and justify your decision based on the observed scene. If it's a long-tail scenario, analyze the possible actions, make a judgment, and output your decision.
#
# Remember to prioritize public transportation and emergency vehicles, follow the signal phase durations, and do not give a green light to impassable movements.
#
# Here are your attentions points:
# 1. DONOT finish the task until you have a final answer. You must output a decision when you finish this task. Your final output decision must be unique and not ambiguous. For example you cannot say "I can either keep lane or accelerate at current time".
# 2. You can only use tools mentioned before to help you make decision. DONOT fabricate any other tool name not mentioned.
# 3. Remember what tools you have used, DONOT use the same tool repeatedly.
#
# Let's take a deep breath and think step by step. Once you made a final decision, output it in the following format: \n
# ```
# Final Answer:
#     "decision":{{"traffic signal light decision, ONE of the available actions"}},
#     "expalanations":{{"your explaination about your decision, described your suggestions to the Crossing Guard"}}
# ``` \n
# """

# SYSTEM_MESSAGE_PREFIX = """You are ChatGPT, a large language model trained by OpenAI.
# You are now act as a mature traffic signal control assistant, who can give accurate and correct advice for human in complex traffic light control scenarios with different cases.
#
# TOOLS:
# ------
# You have access to the following tools:
# """
FORMAT_INSTRUCTIONS = """The way you use the tools is by specifying a json blob.
Specifically, this json should have a `action` key (with the name of the tool to use) and a `action_input` key (with the input to the tool going here).
The only values that should be in the "action" field are one of: {tool_names}

The $JSON_BLOB should only contain a SINGLE action, do NOT return a list of multiple actions. **Here is an example of a valid $JSON_BLOB**:
```
{{{{
  "action": $TOOL_NAME,
  "action_input": $INPUT
}}}}
```

ALWAYS use the following format when you use tool:
Question: the input question you must answer
Thought: always summarize the tools you have used and think what to do next step by step
Action:
```
$JSON_BLOB
```
Observation: the result of the action
... (this Thought/Action/Observation can repeat N times)
"""

SYSTEM_MESSAGE_PREFIX_TOOL = """You are a mature taxi manager for vehicle dispatch and passenger assignment, who can give reasonable and efficient advice to taxi drivers in complex traffic scenarios. 

TOOLS:
------
You have access to the following tools:
"""
# SYSTEM_MESSAGE_PREFIX = """You are a super decision-maker for vehicle dispatch and passenger assignment, who can give reasonable and efficient advice to taxi drivers in complex traffic scenarios.
# """
SYSTEM_MESSAGE_PREFIX = "You are an AI assistant tasked with assigning taxi drivers to passengers, who can explore more information to do more clever decision. "
SYSTEM_MESSAGE_SUFFIX = """
The taxi assignment control task usually involves many steps. You can break this task down into subtasks and complete them one by one. 
There is no rush to give a final answer unless you are confident that the answer is correct.
Answer the following questions as best you can. Begin! 

Take a deep breath and work on this problem step-by-step.
Reminder you MUST use the EXACT characters `Final Answer` when responding the final answer of the original input question.
"""

HUMAN_MESSAGE = "{input}\n\n{agent_scratchpad}"

HANDLE_PARSING_ERROR = """Check your output and make sure it conforms the format instructions! **Here is an example of a valid **format instructions**:
```
{
  "action": TOOL_NAME
  "action_input": INPUT
}
```"""



